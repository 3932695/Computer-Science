
class MyStack {
	int Size;
	int[] Contents;

	void init() {
		Size = 0;
		Contents = NewArray(100, int);
	}

	void push(int x) {
		Contents[Size] = x;
		Size = Size + 1;
	}
	
	void pop() {
		if (empty()) return;
		Size = Size - 1;
	}

	int top() {
		return Contents[Size - 1];
	}
	
	bool empty() {
		return (Size == 0);
	}
}


class SudokuBoard {
	int[][] Map;
	MyStack solution;
	MyStack unknownrow;
	MyStack unknowncolumn;

	void init() {
		int i;
		Map = NewArray(9, int[]);
		for (i = 0; i < 9; i = i + 1) {
			Map[i] = NewArray(9, int);
		}
		solution = new(MyStack);
		unknownrow = new(MyStack);
		unknowncolumn = new(MyStack);
		solution.init();
		unknownrow.init();
		unknowncolumn.init();
		getEntries();
	}

	
	bool testInitial() {	
		
		int i;
		for (i=0;i<9;i=i+1) {
			int j;
			for (j=0;j<9;j=j+1) {
				
				int value;
				value = getValue(i, j);
				if (value != 0) {
						
					int n;
					int row;
					int column;
					int k;
					for (n=0;n<9;n=n+1) {
						if (value == getValue(i,n)) {
							if (n!=i) {
								return false;
							}
						}
						if (value == getValue(n,j)) {
							if (n!=j) {
								return false;
							}
						}
					}
					
					row = getRowBlock(i);
					column = getColBlock(j);
					
					for (k=0;k<3;k=k+1) {
						int l;
						for (l=0;l<3;l=l+1) {
							if (value==getValue(row,column)) {
								if (i!=row) {
									return false;
								}
							}
							column = column + 1;
						}
						row = row + 1;
						column = column - 3;
					}
				
				}			
			}
		}
		
		return true;
	}
	

	void printBoard() {
		int i;
		for (i=0;i<9;i=i+1) {
			print(getValue(i,0)," ",
				getValue(i,1)," ",
				getValue(i,2)," ",
				getValue(i,3)," ",
				getValue(i,4)," ",
				getValue(i,5)," ",
				getValue(i,6)," ",
				getValue(i,7)," ",
				getValue(i,8));
		}
	}

	void solve() {
		
		int result;
		int i;
		for (i=0;i<9;i=i+1) {
			int j;
			for (j=0;j<9;j=j+1) {
				if (getValue(i,j)==0) {
					//print(i, " ", j);
					result = testValues(i,j,1);
					if (result==0) {
						fixSolution();
						i=0;
						j=0;
					}
					else {
						solution.push(result);
						unknownrow.push(i);
						unknowncolumn.push(j);
						setValue(i,j,result);
					}
				}
			}
		}		
	}

	
	int testValues(int row, int column, int n) {
		
		
		int i;
				
		for (i=n;i<10;i=i+1) {
			bool work;
			int j;
			int k;
			int l;
			int rowblock;
			int colblock;
	
			work = true;				

			print("I: ", i);
			for (j = 0; j < 9; j = j + 1) {
				//print(row, " " , column);
				if (getValue(j,column)==i) work = false;
				if (getValue(row,j)==i) work = false;
				
			}
				
			rowblock = getRowBlock(row);
			colblock = getColBlock(column);
			for (k=0;k<3;k=k+1) {
				for (l=0;l<3;l=l+1) {
					if (getValue(rowblock,colblock)==i) work = false;
					colblock = colblock + 1;
				}
				rowblock = rowblock + 1;
				colblock = colblock - 3;
			}

			if (work==true) return i;
			
		}
		
		return 0;
	}
	

	
	void fixSolution() {
		
		int value;
		int i;
		int j;
		value = 0;
		i = 0;
		j = 0;
		
		while (value == 0) {
			int n;
			n = solution.top();
			i = unknownrow.top();
			unknownrow.pop();
			j = unknowncolumn.top();
			unknowncolumn.pop();
			value = testValues(i,j,n);
			setValue(i,j,0);
		}
		setValue(i,j,value);
		solution.push(value);
		unknownrow.push(i);
		unknowncolumn.push(j);
		
	}
	

	void getEntries() {
		
		int result;
		int count;
		int[] input;
		int[] intlist;
		int i;		
		int j;

		input = NewArray(81,int);
		count = 0;

		
		while (count < 5) {
			readinteger();	
			//input[count] = readinteger();
			count = count + 1;
		}
		/*
		intlist = NewArray(81,int);
		
		for (i=0;i<81;i=i+1) {
			int x;
			int y;
			x = input[i];
			y = x - 48;
			if (y < 1) y = 0;
			if (y > 9) y = 0;
			intlist[i] = y;
		}
		
		count = 0;
		for (i=0;i<9;i=i+1) {
			for (j=0;j<9;j=j+1) {
				setValue(i,j,intlist[count]);
				count = count + 1;
			}
		}
		*/
	}

	void setValue(int row, int column, int value) {
		Map[row][column] = value;
		
	}

	int getValue(int row, int column) {
		
		int[] a;

		
		a = Map[row];
		return a[column];
		
		return 0;
	}

	int getRowBlock(int row) {
		
		if (row < 3) return 0;
		else if (row < 6) return 3;
		else return 6;
		
		return 0;
	}

	int getColBlock(int col) {
		
		if (col < 3) return 0;
		else if (col < 6) return 3;
		else return 6;
		
		return 0;
	}

}

void main() {
	SudokuBoard board;
	board = new(SudokuBoard);
	board.init();
	return;
	if (board.testInitial()) {
		board.solve();
		board.printBoard();
	}
	else {
		print("You made a booboo while making the puzzle.");
	}
}